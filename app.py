import os
from PIL import Image
import pytesseract
from transformers import MarianMTModel, MarianTokenizer
from langdetect import detect
import streamlit as st

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ RU ‚Üî ES —Å OCR",
    page_icon="üåç",
    layout="wide"
)

# –ö—ç—à–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–µ–π –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
@st.cache_resource
def load_models():
    model_ru_es = MarianMTModel.from_pretrained("Helsinki-NLP/opus-mt-ru-es")
    tokenizer_ru_es = MarianTokenizer.from_pretrained("Helsinki-NLP/opus-mt-ru-es")
    
    model_es_ru = MarianMTModel.from_pretrained("Helsinki-NLP/opus-mt-es-ru")
    tokenizer_es_ru = MarianTokenizer.from_pretrained("Helsinki-NLP/opus-mt-es-ru")
    
    return {
        "–†—É—Å—Å–∫–∏–π ‚Üí –ò—Å–ø–∞–Ω—Å–∫–∏–π": (model_ru_es, tokenizer_ru_es),
        "–ò—Å–ø–∞–Ω—Å–∫–∏–π ‚Üí –†—É—Å—Å–∫–∏–π": (model_es_ru, tokenizer_es_ru)
    }

models = load_models()

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏
def split_text(text, max_length=500):
    sentences = text.split('. ')
    chunks = []
    current_chunk = ""
    
    for sentence in sentences:
        if len(current_chunk + sentence) > max_length:
            chunks.append(current_chunk)
            current_chunk = sentence
        else:
            current_chunk += (sentence + '. ')
    
    if current_chunk:
        chunks.append(current_chunk)
    
    return chunks

# –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def preprocess_image(image):
    gray_image = image.convert('L')
    binarized_image = gray_image.point(lambda p: p > 128 and 255)
    return binarized_image

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
def translate_text(text, direction):
    if not text.strip():
        return "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞."
    
    if len(text) > 5000:
        return "–û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 5000 —Å–∏–º–≤–æ–ª–æ–≤)."

    if direction == "–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ":
        try:
            lang = detect(text)
            if lang == "ru":
                direction = "–†—É—Å—Å–∫–∏–π ‚Üí –ò—Å–ø–∞–Ω—Å–∫–∏–π"
            elif lang == "es":
                direction = "–ò—Å–ø–∞–Ω—Å–∫–∏–π ‚Üí –†—É—Å—Å–∫–∏–π"
            else:
                return "–û—à–∏–±–∫–∞: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π –∏ –∏—Å–ø–∞–Ω—Å–∫–∏–π —è–∑—ã–∫–∏."
        except:
            return "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫."

    if direction not in models:
        return "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞."

    model, tokenizer = models[direction]
    text_parts = split_text(text)
    translations = []
    
    for part in text_parts:
        inputs = tokenizer(part, return_tensors="pt")
        translated_tokens = model.generate(**inputs)
        translation = tokenizer.batch_decode(translated_tokens, skip_special_tokens=True)[0]
        translations.append(translation)
    
    return ' '.join(translations)

# OCR + –ø–µ—Ä–µ–≤–æ–¥
def ocr_and_translate(image, direction):
    try:
        preprocessed_image = preprocess_image(image)
        extracted_text = pytesseract.image_to_string(preprocessed_image, lang="rus+spa")
        
        if not extracted_text.strip():
            return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏", ""
            
        translation = translate_text(extracted_text, direction)
        return extracted_text.strip(), translation
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {str(e)}", ""

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.title("üá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å OCR üá™üá∏")
st.write("–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–µ–∂–¥—É —Ä—É—Å—Å–∫–∏–º –∏ –∏—Å–ø–∞–Ω—Å–∫–∏–º —è–∑—ã–∫–∞–º–∏")

tab1, tab2 = st.tabs(["üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥", "üñºÔ∏è –ü–µ—Ä–µ–≤–æ–¥ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"])

with tab1:
    with st.form("text_translation_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            text_input = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:", height=200)
            direction_text = st.radio(
                "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞:",
                ["–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", "–†—É—Å—Å–∫–∏–π ‚Üí –ò—Å–ø–∞–Ω—Å–∫–∏–π", "–ò—Å–ø–∞–Ω—Å–∫–∏–π ‚Üí –†—É—Å—Å–∫–∏–π"],
                index=0
            )
            submit_text = st.form_submit_button("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏")
        
        with col2:
            if submit_text and text_input:
                with st.spinner("–ü–µ—Ä–µ–≤–æ–¥–∏–º..."):
                    result = translate_text(text_input, direction_text)
                st.text_area("–ü–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", value=result, height=200)
            else:
                st.text_area("–ü–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", height=200)

with tab2:
    with st.form("image_translation_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            image_input = st.file_uploader(
                "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:",
                type=["jpg", "jpeg", "png"]
            )
            if image_input:
                image = Image.open(image_input)
                st.image(image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", width=300)
                
            direction_image = st.radio(
                "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞:",
                ["–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", "–†—É—Å—Å–∫–∏–π ‚Üí –ò—Å–ø–∞–Ω—Å–∫–∏–π", "–ò—Å–ø–∞–Ω—Å–∫–∏–π ‚Üí –†—É—Å—Å–∫–∏–π"],
                index=0,
                key="image_direction"
            )
            submit_image = st.form_submit_button("–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏")
        
        with col2:
            if submit_image and image_input:
                with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..."):
                    extracted, translated = ocr_and_translate(image, direction_image)
                
                st.text_area("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", value=extracted, height=100)
                st.text_area("–ü–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", value=translated, height=100)
            else:
                st.text_area("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", height=100)
                st.text_area("–ü–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", height=100)

# –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø—Ä–æ Tesseract
st.sidebar.info(
    "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è Tesseract OCR. "
    "–ù–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: \n\n"
    "`sudo apt install tesseract-ocr tesseract-ocr-rus tesseract-ocr-spa`"
)
